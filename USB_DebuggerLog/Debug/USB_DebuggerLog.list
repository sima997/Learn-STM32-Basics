
USB_DebuggerLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000387c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a94  08003a94  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a9c  08003a9c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000001c  08003ac0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003ac0  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b3e  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fc  00000000  00000000  00028b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a8  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251ff  00000000  00000000  0002b110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ea8  00000000  00000000  0005030f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e802e  00000000  00000000  000571b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f1e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ddc  00000000  00000000  0013f260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000001c 	.word	0x2000001c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003a5c 	.word	0x08003a5c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000020 	.word	0x20000020
 8000234:	08003a5c 	.word	0x08003a5c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fb45 	bl	8000bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f880 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f95c 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 f93c 	bl	80007c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800054c:	f000 f90a 	bl	8000764 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_DMA(&huart3,input,1);
 8000550:	2201      	movs	r2, #1
 8000552:	4937      	ldr	r1, [pc, #220]	; (8000630 <main+0xf8>)
 8000554:	4837      	ldr	r0, [pc, #220]	; (8000634 <main+0xfc>)
 8000556:	f002 fbf9 	bl	8002d4c <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //---------Send message if BTN is pressed
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 1){
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	4836      	ldr	r0, [pc, #216]	; (8000638 <main+0x100>)
 8000560:	f001 fa06 	bl	8001970 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b01      	cmp	r3, #1
 8000568:	d109      	bne.n	800057e <main+0x46>
		 HAL_UART_Transmit(&huart3,output,13,10);
 800056a:	230a      	movs	r3, #10
 800056c:	220d      	movs	r2, #13
 800056e:	4933      	ldr	r1, [pc, #204]	; (800063c <main+0x104>)
 8000570:	4830      	ldr	r0, [pc, #192]	; (8000634 <main+0xfc>)
 8000572:	f002 fb59 	bl	8002c28 <HAL_UART_Transmit>
		 HAL_Delay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057a:	f000 fb83 	bl	8000c84 <HAL_Delay>
	 }
	  //-------------------------------------

	  //------------Light up LE1[Green] if you send 1, off when 0
	  if(input[0] == 10){
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <main+0xf8>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b0a      	cmp	r3, #10
 8000584:	d105      	bne.n	8000592 <main+0x5a>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000586:	2201      	movs	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	482d      	ldr	r0, [pc, #180]	; (8000640 <main+0x108>)
 800058c:	f001 fa08 	bl	80019a0 <HAL_GPIO_WritePin>
 8000590:	e004      	b.n	800059c <main+0x64>
	  }else{
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	482a      	ldr	r0, [pc, #168]	; (8000640 <main+0x108>)
 8000598:	f001 fa02 	bl	80019a0 <HAL_GPIO_WritePin>
	  //----------------------------------------


	  //-----Light up all 3 lends independently in one command

	 switch (input[0]){
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <main+0xf8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	d8da      	bhi.n	800055a <main+0x22>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <main+0x74>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005cd 	.word	0x080005cd
 80005b0:	080005d9 	.word	0x080005d9
 80005b4:	080005e5 	.word	0x080005e5
 80005b8:	080005fd 	.word	0x080005fd
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	08000615 	.word	0x08000615
 80005c4:	08000609 	.word	0x08000609
 80005c8:	08000621 	.word	0x08000621
	 	 case 0: //000b
	 		 MultiLed(0,0,0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f987 	bl	80008e4 <MultiLed>
		 break;
 80005d6:	e029      	b.n	800062c <main+0xf4>
	 	case 1: //001b

	 		MultiLed(0,0,1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f981 	bl	80008e4 <MultiLed>
		 break;
 80005e2:	e023      	b.n	800062c <main+0xf4>
	 	case 2: //010b

			MultiLed(0,1,0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 f97b 	bl	80008e4 <MultiLed>
		 break;
 80005ee:	e01d      	b.n	800062c <main+0xf4>
		case 4: //100b

			MultiLed(1,0,0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 f975 	bl	80008e4 <MultiLed>
		 break;
 80005fa:	e017      	b.n	800062c <main+0xf4>
		case 3: //011b

			MultiLed(0,1,1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	2000      	movs	r0, #0
 8000602:	f000 f96f 	bl	80008e4 <MultiLed>
		 break;
 8000606:	e011      	b.n	800062c <main+0xf4>
		case 6: //110b

			MultiLed(1,1,0);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f000 f969 	bl	80008e4 <MultiLed>
		 break;
 8000612:	e00b      	b.n	800062c <main+0xf4>
		case 5: //101b

			MultiLed(1,0,1);
 8000614:	2201      	movs	r2, #1
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f000 f963 	bl	80008e4 <MultiLed>
		 break;
 800061e:	e005      	b.n	800062c <main+0xf4>
		case 7: //111b

			MultiLed(1,1,1);
 8000620:	2201      	movs	r2, #1
 8000622:	2101      	movs	r1, #1
 8000624:	2001      	movs	r0, #1
 8000626:	f000 f95d 	bl	80008e4 <MultiLed>
		 break;
 800062a:	bf00      	nop
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 1){
 800062c:	e795      	b.n	800055a <main+0x22>
 800062e:	bf00      	nop
 8000630:	20000118 	.word	0x20000118
 8000634:	20000098 	.word	0x20000098
 8000638:	40020800 	.word	0x40020800
 800063c:	20000000 	.word	0x20000000
 8000640:	40020400 	.word	0x40020400

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0b8      	sub	sp, #224	; 0xe0
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f9fa 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2290      	movs	r2, #144	; 0x90
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f9eb 	bl	8003a4c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <SystemClock_Config+0x118>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a38      	ldr	r2, [pc, #224]	; (800075c <SystemClock_Config+0x118>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b36      	ldr	r3, [pc, #216]	; (800075c <SystemClock_Config+0x118>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <SystemClock_Config+0x11c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000696:	4a32      	ldr	r2, [pc, #200]	; (8000760 <SystemClock_Config+0x11c>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <SystemClock_Config+0x11c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f9c6 	bl	8001a74 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 f91f 	bl	8000930 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f2:	f001 f96f 	bl	80019d4 <HAL_PWREx_EnableOverDrive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006fc:	f000 f918 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fc16 	bl	8001f58 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000732:	f000 f8fd 	bl	8000930 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800073c:	2300      	movs	r3, #0
 800073e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fdfb 	bl	8002340 <HAL_RCCEx_PeriphCLKConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000750:	f000 f8ee 	bl	8000930 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	37e0      	adds	r7, #224	; 0xe0
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART3_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a8:	f002 f9f0 	bl	8002b8c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f8bd 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000098 	.word	0x20000098
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_DMA_Init+0x38>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <MX_DMA_Init+0x38>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_DMA_Init+0x38>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	200c      	movs	r0, #12
 80007e8:	f000 fb49 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007ec:	200c      	movs	r0, #12
 80007ee:	f000 fb62 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2a      	ldr	r2, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f244 0181 	movw	r1, #16513	; 0x4081
 800087c:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_GPIO_Init+0xc8>)
 800087e:	f001 f88f 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_GPIO_Init+0xcc>)
 8000898:	f000 fec0 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800089c:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xc8>)
 80008b6:	f000 feb1 	bl	800161c <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800

080008d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <MultiLed>:

void MultiLed(int r, int b, int g){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,r);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <MultiLed+0x48>)
 80008fc:	f001 f850 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,b);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4808      	ldr	r0, [pc, #32]	; (800092c <MultiLed+0x48>)
 800090a:	f001 f849 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,g);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	2101      	movs	r1, #1
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MultiLed+0x48>)
 8000918:	f001 f842 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800091c:	2064      	movs	r0, #100	; 0x64
 800091e:	f000 f9b1 	bl	8000c84 <HAL_Delay>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020400 	.word	0x40020400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d15f      	bne.n	8000a6a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a32      	ldr	r2, [pc, #200]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 80009b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a2c      	ldr	r2, [pc, #176]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ec:	2307      	movs	r3, #7
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <HAL_UART_MspInit+0xf4>)
 80009f8:	f000 fe10 	bl	800161c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_UART_MspInit+0xfc>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a08:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a30:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a3e:	4810      	ldr	r0, [pc, #64]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a40:	f000 fa54 	bl	8000eec <HAL_DMA_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000a4a:	f7ff ff71 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a52:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_UART_MspInit+0xf8>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2027      	movs	r0, #39	; 0x27
 8000a60:	f000 fa0d 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a64:	2027      	movs	r0, #39	; 0x27
 8000a66:	f000 fa26 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004800 	.word	0x40004800
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	20000038 	.word	0x20000038
 8000a84:	40026028 	.word	0x40026028

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8b2 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <DMA1_Stream1_IRQHandler+0x10>)
 8000aea:	f000 fb2f 	bl	800114c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000038 	.word	0x20000038

08000af8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <USART3_IRQHandler+0x10>)
 8000afe:	f002 f9a9 	bl	8002e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000098 	.word	0x20000098

08000b0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <SystemInit+0x5c>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <SystemInit+0x5c>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <SystemInit+0x60>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <SystemInit+0x60>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <SystemInit+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <SystemInit+0x60>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <SystemInit+0x60>)
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <SystemInit+0x64>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <SystemInit+0x60>)
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <SystemInit+0x68>)
 8000b42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <SystemInit+0x60>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <SystemInit+0x60>)
 8000b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x60>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SystemInit+0x5c>)
 8000b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	fef6ffff 	.word	0xfef6ffff
 8000b74:	24003010 	.word	0x24003010

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b7e:	e003      	b.n	8000b88 <LoopCopyDataInit>

08000b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b86:	3104      	adds	r1, #4

08000b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b90:	d3f6      	bcc.n	8000b80 <CopyDataInit>
  ldr  r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b94:	e002      	b.n	8000b9c <LoopFillZerobss>

08000b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b98:	f842 3b04 	str.w	r3, [r2], #4

08000b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ba0:	d3f9      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffb3 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 ff2d 	bl	8003a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fcc5 	bl	8000538 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000bb4:	08003aa4 	.word	0x08003aa4
  ldr  r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bbc:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000bc0:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000bc4:	20000120 	.word	0x20000120

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>

08000bca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f94a 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f805 	bl	8000be4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bda:	f7ff feb1 	bl	8000940 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f965 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f92d 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000010 	.word	0x20000010
 8000c3c:	20000018 	.word	0x20000018
 8000c40:	20000014 	.word	0x20000014

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000018 	.word	0x20000018
 8000c68:	2000011c 	.word	0x2000011c

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000011c 	.word	0x2000011c

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_Delay+0x40>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000018 	.word	0x20000018

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	05fa0000 	.word	0x05fa0000

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff feb8 	bl	8000c6c <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e099      	b.n	800103c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2202      	movs	r2, #2
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f28:	e00f      	b.n	8000f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f2a:	f7ff fe9f 	bl	8000c6c <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d908      	bls.n	8000f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2203      	movs	r2, #3
 8000f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e078      	b.n	800103c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e8      	bne.n	8000f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_DMA_Init+0x158>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d107      	bne.n	8000fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4313      	orrs	r3, r2
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f023 0307 	bic.w	r3, r3, #7
 8000fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d117      	bne.n	800100e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fa99 	bl	8001528 <DMA_CheckFifoParam>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800100a:	2301      	movs	r3, #1
 800100c:	e016      	b.n	800103c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 fa50 	bl	80014bc <DMA_CalcBaseAndBitshift>
 800101c:	4603      	mov	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001024:	223f      	movs	r2, #63	; 0x3f
 8001026:	409a      	lsls	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	e010803f 	.word	0xe010803f

08001048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_DMA_Start_IT+0x26>
 800106a:	2302      	movs	r3, #2
 800106c:	e048      	b.n	8001100 <HAL_DMA_Start_IT+0xb8>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d137      	bne.n	80010f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2202      	movs	r2, #2
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f9e2 	bl	8001460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	223f      	movs	r2, #63	; 0x3f
 80010a2:	409a      	lsls	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0216 	orr.w	r2, r2, #22
 80010b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0208 	orr.w	r2, r2, #8
 80010de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e005      	b.n	80010fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
 80010fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d004      	beq.n	8001126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00c      	b.n	8001140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001158:	4b92      	ldr	r3, [pc, #584]	; (80013a4 <HAL_DMA_IRQHandler+0x258>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <HAL_DMA_IRQHandler+0x25c>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0a9b      	lsrs	r3, r3, #10
 8001164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	2208      	movs	r2, #8
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d01a      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2208      	movs	r2, #8
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	2201      	movs	r2, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d012      	beq.n	80011ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2201      	movs	r2, #1
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2204      	movs	r2, #4
 80011f4:	409a      	lsls	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d012      	beq.n	8001224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	2204      	movs	r2, #4
 8001212:	409a      	lsls	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	f043 0204 	orr.w	r2, r3, #4
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	2210      	movs	r2, #16
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d043      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03c      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	2210      	movs	r2, #16
 8001248:	409a      	lsls	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d018      	beq.n	800128e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d024      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
 800127a:	e01f      	b.n	80012bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01b      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
 800128c:	e016      	b.n	80012bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0208 	bic.w	r2, r2, #8
 80012aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2220      	movs	r2, #32
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 808e 	beq.w	80013ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 8086 	beq.w	80013ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	2220      	movs	r2, #32
 80012e4:	409a      	lsls	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d136      	bne.n	8001364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0216 	bic.w	r2, r2, #22
 8001304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <HAL_DMA_IRQHandler+0x1da>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0208 	bic.w	r2, r2, #8
 8001334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	223f      	movs	r2, #63	; 0x3f
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001356:	2b00      	cmp	r3, #0
 8001358:	d07d      	beq.n	8001456 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
        }
        return;
 8001362:	e078      	b.n	8001456 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01c      	beq.n	80013ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d108      	bne.n	8001392 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	2b00      	cmp	r3, #0
 8001386:	d030      	beq.n	80013ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
 8001390:	e02b      	b.n	80013ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001396:	2b00      	cmp	r3, #0
 8001398:	d027      	beq.n	80013ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4798      	blx	r3
 80013a2:	e022      	b.n	80013ea <HAL_DMA_IRQHandler+0x29e>
 80013a4:	20000010 	.word	0x20000010
 80013a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0210 	bic.w	r2, r2, #16
 80013c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d032      	beq.n	8001458 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d022      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2205      	movs	r2, #5
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	429a      	cmp	r2, r3
 8001420:	d307      	bcc.n	8001432 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f2      	bne.n	8001416 <HAL_DMA_IRQHandler+0x2ca>
 8001430:	e000      	b.n	8001434 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001432:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001456:	bf00      	nop
    }
  }
}
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop

08001460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800147c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	d108      	bne.n	80014a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800149e:	e007      	b.n	80014b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3b10      	subs	r3, #16
 80014cc:	4a13      	ldr	r2, [pc, #76]	; (800151c <DMA_CalcBaseAndBitshift+0x60>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <DMA_CalcBaseAndBitshift+0x64>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d908      	bls.n	80014fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <DMA_CalcBaseAndBitshift+0x68>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	1d1a      	adds	r2, r3, #4
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	659a      	str	r2, [r3, #88]	; 0x58
 80014fa:	e006      	b.n	800150a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <DMA_CalcBaseAndBitshift+0x68>)
 8001504:	4013      	ands	r3, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	aaaaaaab 	.word	0xaaaaaaab
 8001520:	08003a8c 	.word	0x08003a8c
 8001524:	fffffc00 	.word	0xfffffc00

08001528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d11f      	bne.n	8001582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d855      	bhi.n	80015f4 <DMA_CheckFifoParam+0xcc>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <DMA_CheckFifoParam+0x28>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	08001573 	.word	0x08001573
 8001558:	08001561 	.word	0x08001561
 800155c:	080015f5 	.word	0x080015f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d045      	beq.n	80015f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001570:	e042      	b.n	80015f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800157a:	d13f      	bne.n	80015fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001580:	e03c      	b.n	80015fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800158a:	d121      	bne.n	80015d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d836      	bhi.n	8001600 <DMA_CheckFifoParam+0xd8>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <DMA_CheckFifoParam+0x70>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080015af 	.word	0x080015af
 80015a0:	080015a9 	.word	0x080015a9
 80015a4:	080015c1 	.word	0x080015c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      break;
 80015ac:	e02f      	b.n	800160e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d024      	beq.n	8001604 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015be:	e021      	b.n	8001604 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c8:	d11e      	bne.n	8001608 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ce:	e01b      	b.n	8001608 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d902      	bls.n	80015dc <DMA_CheckFifoParam+0xb4>
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d003      	beq.n	80015e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015da:	e018      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
      break;
 80015e0:	e015      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00e      	beq.n	800160c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
      break;
 80015f2:	e00b      	b.n	800160c <DMA_CheckFifoParam+0xe4>
      break;
 80015f4:	bf00      	nop
 80015f6:	e00a      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 80015f8:	bf00      	nop
 80015fa:	e008      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 80015fc:	bf00      	nop
 80015fe:	e006      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 8001600:	bf00      	nop
 8001602:	e004      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 8001604:	bf00      	nop
 8001606:	e002      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;   
 8001608:	bf00      	nop
 800160a:	e000      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 800160c:	bf00      	nop
    }
  } 
  
  return status; 
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e175      	b.n	8001928 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8164 	bne.w	8001922 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x4e>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b12      	cmp	r3, #18
 8001668:	d123      	bne.n	80016b2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	69b9      	ldr	r1, [r7, #24]
 80016ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0203 	and.w	r2, r3, #3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d00b      	beq.n	8001706 <HAL_GPIO_Init+0xea>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fa:	2b11      	cmp	r3, #17
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b12      	cmp	r3, #18
 8001704:	d130      	bne.n	8001768 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 0201 	and.w	r2, r3, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80be 	beq.w	8001922 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_GPIO_Init+0x320>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a64      	ldr	r2, [pc, #400]	; (800193c <HAL_GPIO_Init+0x320>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_GPIO_Init+0x320>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017be:	4a60      	ldr	r2, [pc, #384]	; (8001940 <HAL_GPIO_Init+0x324>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a57      	ldr	r2, [pc, #348]	; (8001944 <HAL_GPIO_Init+0x328>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d037      	beq.n	800185a <HAL_GPIO_Init+0x23e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a56      	ldr	r2, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d031      	beq.n	8001856 <HAL_GPIO_Init+0x23a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a55      	ldr	r2, [pc, #340]	; (800194c <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d02b      	beq.n	8001852 <HAL_GPIO_Init+0x236>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a54      	ldr	r2, [pc, #336]	; (8001950 <HAL_GPIO_Init+0x334>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x232>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a53      	ldr	r2, [pc, #332]	; (8001954 <HAL_GPIO_Init+0x338>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x22e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_GPIO_Init+0x33c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x22a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_GPIO_Init+0x340>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x226>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a50      	ldr	r2, [pc, #320]	; (8001960 <HAL_GPIO_Init+0x344>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x222>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4f      	ldr	r2, [pc, #316]	; (8001964 <HAL_GPIO_Init+0x348>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x21e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4e      	ldr	r2, [pc, #312]	; (8001968 <HAL_GPIO_Init+0x34c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x21a>
 8001832:	2309      	movs	r3, #9
 8001834:	e012      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001836:	230a      	movs	r3, #10
 8001838:	e010      	b.n	800185c <HAL_GPIO_Init+0x240>
 800183a:	2308      	movs	r3, #8
 800183c:	e00e      	b.n	800185c <HAL_GPIO_Init+0x240>
 800183e:	2307      	movs	r3, #7
 8001840:	e00c      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001842:	2306      	movs	r3, #6
 8001844:	e00a      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001846:	2305      	movs	r3, #5
 8001848:	e008      	b.n	800185c <HAL_GPIO_Init+0x240>
 800184a:	2304      	movs	r3, #4
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x240>
 800184e:	2303      	movs	r3, #3
 8001850:	e004      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001852:	2302      	movs	r3, #2
 8001854:	e002      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x240>
 800185a:	2300      	movs	r3, #0
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f002 0203 	and.w	r2, r2, #3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4093      	lsls	r3, r2
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800186c:	4934      	ldr	r1, [pc, #208]	; (8001940 <HAL_GPIO_Init+0x324>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187a:	4b3c      	ldr	r3, [pc, #240]	; (800196c <HAL_GPIO_Init+0x350>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189e:	4a33      	ldr	r2, [pc, #204]	; (800196c <HAL_GPIO_Init+0x350>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_GPIO_Init+0x350>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_GPIO_Init+0x350>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_GPIO_Init+0x350>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_GPIO_Init+0x350>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_GPIO_Init+0x350>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <HAL_GPIO_Init+0x350>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3301      	adds	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	f67f ae86 	bls.w	800163c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001930:	bf00      	nop
 8001932:	3724      	adds	r7, #36	; 0x24
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40021400 	.word	0x40021400
 800195c:	40021800 	.word	0x40021800
 8001960:	40021c00 	.word	0x40021c00
 8001964:	40022000 	.word	0x40022000
 8001968:	40022400 	.word	0x40022400
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a02:	f7ff f933 	bl	8000c6c <HAL_GetTick>
 8001a06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a08:	e009      	b.n	8001a1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a0a:	f7ff f92f 	bl	8000c6c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a18:	d901      	bls.n	8001a1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e022      	b.n	8001a64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a38:	f7ff f918 	bl	8000c6c <HAL_GetTick>
 8001a3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a3e:	e009      	b.n	8001a54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a40:	f7ff f914 	bl	8000c6c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a4e:	d901      	bls.n	8001a54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e007      	b.n	8001a64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a60:	d1ee      	bne.n	8001a40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e25e      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	4b96      	ldr	r3, [pc, #600]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00c      	beq.n	8001abe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa4:	4b93      	ldr	r3, [pc, #588]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d112      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
 8001ab0:	4b90      	ldr	r3, [pc, #576]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abc:	d10b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	4b8d      	ldr	r3, [pc, #564]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d06c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x130>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d168      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e238      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x7a>
 8001ae0:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a83      	ldr	r2, [pc, #524]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0xd8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x9c>
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7e      	ldr	r2, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7b      	ldr	r2, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xd8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a72      	ldr	r2, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xd8>
 8001b34:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6b      	ldr	r2, [pc, #428]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f88a 	bl	8000c6c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f886 	bl	8000c6c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1ec      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f876 	bl	8000c6c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f872 	bl	8000c6c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1d8      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x110>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d069      	beq.n	8001c86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x190>
 8001bca:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x17a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1ac      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	493d      	ldr	r1, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e040      	b.n	8001c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a38      	ldr	r2, [pc, #224]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f828 	bl	8000c6c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff f824 	bl	8000c6c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e18a      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
 8001c52:	e018      	b.n	8001c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f804 	bl	8000c6c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff f800 	bl	8000c6c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e166      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d038      	beq.n	8001d04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d019      	beq.n	8001cce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7fe ffe1 	bl	8000c6c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7fe ffdd 	bl	8000c6c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e143      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x23a>
 8001ccc:	e01a      	b.n	8001d04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7fe ffc7 	bl	8000c6c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce2:	f7fe ffc3 	bl	8000c6c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d903      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e129      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
 8001cf4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b95      	ldr	r3, [pc, #596]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a4 	beq.w	8001e5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a8b      	ldr	r2, [pc, #556]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3a:	4b86      	ldr	r3, [pc, #536]	; (8001f54 <HAL_RCC_OscConfig+0x4e0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d46:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <HAL_RCC_OscConfig+0x4e0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a82      	ldr	r2, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x4e0>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7fe ff8b 	bl	8000c6c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7fe ff87 	bl	8000c6c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0ed      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6c:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <HAL_RCC_OscConfig+0x4e0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x31a>
 8001d80:	4b73      	ldr	r3, [pc, #460]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	4a72      	ldr	r2, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_OscConfig+0x376>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x33c>
 8001d96:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	4a6d      	ldr	r2, [pc, #436]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
 8001da2:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	4a6a      	ldr	r2, [pc, #424]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
 8001dae:	e01c      	b.n	8001dea <HAL_RCC_OscConfig+0x376>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x35e>
 8001db8:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a64      	ldr	r2, [pc, #400]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc4:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	e00b      	b.n	8001dea <HAL_RCC_OscConfig+0x376>
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a5e      	ldr	r2, [pc, #376]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a5b      	ldr	r2, [pc, #364]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff3b 	bl	8000c6c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe ff37 	bl	8000c6c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e09b      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ee      	beq.n	8001dfa <HAL_RCC_OscConfig+0x386>
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ff25 	bl	8000c6c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7fe ff21 	bl	8000c6c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e085      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a3f      	ldr	r2, [pc, #252]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d071      	beq.n	8001f46 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d069      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d14b      	bne.n	8001f0e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7fe fef3 	bl	8000c6c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe feef 	bl	8000c6c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e055      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	061b      	lsls	r3, r3, #24
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	071b      	lsls	r3, r3, #28
 8001ed4:	491e      	ldr	r1, [pc, #120]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fec1 	bl	8000c6c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe febd 	bl	8000c6c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e023      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x47a>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fea7 	bl	8000c6c <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe fea3 	bl	8000c6c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e009      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4ae>
 8001f40:	e001      	b.n	8001f46 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0ce      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b69      	ldr	r3, [pc, #420]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 020f 	bic.w	r2, r3, #15
 8001f86:	4964      	ldr	r1, [pc, #400]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b6      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a57      	ldr	r2, [pc, #348]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b52      	ldr	r3, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494c      	ldr	r1, [pc, #304]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d040      	beq.n	800207c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07d      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b40      	ldr	r3, [pc, #256]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e071      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e069      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4935      	ldr	r1, [pc, #212]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7fe fe0e 	bl	8000c6c <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe fe0a 	bl	8000c6c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e051      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d210      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	4921      	ldr	r1, [pc, #132]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e030      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4915      	ldr	r1, [pc, #84]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490d      	ldr	r1, [pc, #52]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f81d 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_RCC_ClockConfig+0x1cc>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fd6c 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00
 800211c:	40023800 	.word	0x40023800
 8002120:	08003a74 	.word	0x08003a74
 8002124:	20000010 	.word	0x20000010

08002128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213e:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d007      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x32>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d008      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x38>
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80b4 	bne.w	80022bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002156:	60bb      	str	r3, [r7, #8]
       break;
 8002158:	e0b3      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800215a:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800215c:	60bb      	str	r3, [r7, #8]
      break;
 800215e:	e0b0      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002160:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002168:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d04a      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b55      	ldr	r3, [pc, #340]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	f04f 0400 	mov.w	r4, #0
 8002180:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	ea03 0501 	and.w	r5, r3, r1
 800218c:	ea04 0602 	and.w	r6, r4, r2
 8002190:	4629      	mov	r1, r5
 8002192:	4632      	mov	r2, r6
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f04f 0400 	mov.w	r4, #0
 800219c:	0154      	lsls	r4, r2, #5
 800219e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021a2:	014b      	lsls	r3, r1, #5
 80021a4:	4619      	mov	r1, r3
 80021a6:	4622      	mov	r2, r4
 80021a8:	1b49      	subs	r1, r1, r5
 80021aa:	eb62 0206 	sbc.w	r2, r2, r6
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	f04f 0400 	mov.w	r4, #0
 80021b6:	0194      	lsls	r4, r2, #6
 80021b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021bc:	018b      	lsls	r3, r1, #6
 80021be:	1a5b      	subs	r3, r3, r1
 80021c0:	eb64 0402 	sbc.w	r4, r4, r2
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	00e2      	lsls	r2, r4, #3
 80021ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021d2:	00d9      	lsls	r1, r3, #3
 80021d4:	460b      	mov	r3, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	195b      	adds	r3, r3, r5
 80021da:	eb44 0406 	adc.w	r4, r4, r6
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	0262      	lsls	r2, r4, #9
 80021e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021ec:	0259      	lsls	r1, r3, #9
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	4621      	mov	r1, r4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f04f 0400 	mov.w	r4, #0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	f7fe f81a 	bl	8000238 <__aeabi_uldivmod>
 8002204:	4603      	mov	r3, r0
 8002206:	460c      	mov	r4, r1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e049      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	f04f 0400 	mov.w	r4, #0
 8002216:	f240 11ff 	movw	r1, #511	; 0x1ff
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	ea03 0501 	and.w	r5, r3, r1
 8002222:	ea04 0602 	and.w	r6, r4, r2
 8002226:	4629      	mov	r1, r5
 8002228:	4632      	mov	r2, r6
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f04f 0400 	mov.w	r4, #0
 8002232:	0154      	lsls	r4, r2, #5
 8002234:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002238:	014b      	lsls	r3, r1, #5
 800223a:	4619      	mov	r1, r3
 800223c:	4622      	mov	r2, r4
 800223e:	1b49      	subs	r1, r1, r5
 8002240:	eb62 0206 	sbc.w	r2, r2, r6
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	0194      	lsls	r4, r2, #6
 800224e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002252:	018b      	lsls	r3, r1, #6
 8002254:	1a5b      	subs	r3, r3, r1
 8002256:	eb64 0402 	sbc.w	r4, r4, r2
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	00e2      	lsls	r2, r4, #3
 8002264:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002268:	00d9      	lsls	r1, r3, #3
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	195b      	adds	r3, r3, r5
 8002270:	eb44 0406 	adc.w	r4, r4, r6
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	02a2      	lsls	r2, r4, #10
 800227e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002282:	0299      	lsls	r1, r3, #10
 8002284:	460b      	mov	r3, r1
 8002286:	4614      	mov	r4, r2
 8002288:	4618      	mov	r0, r3
 800228a:	4621      	mov	r1, r4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f04f 0400 	mov.w	r4, #0
 8002292:	461a      	mov	r2, r3
 8002294:	4623      	mov	r3, r4
 8002296:	f7fd ffcf 	bl	8000238 <__aeabi_uldivmod>
 800229a:	4603      	mov	r3, r0
 800229c:	460c      	mov	r4, r1
 800229e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	60bb      	str	r3, [r7, #8]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022be:	60bb      	str	r3, [r7, #8]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	68bb      	ldr	r3, [r7, #8]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCC_GetHCLKFreq+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000010 	.word	0x20000010

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff0 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f8:	4601      	mov	r1, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a9b      	lsrs	r3, r3, #10
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08003a84 	.word	0x08003a84

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffdc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002320:	4601      	mov	r1, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08003a84 	.word	0x08003a84

08002340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d012      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002368:	4b69      	ldr	r3, [pc, #420]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a68      	ldr	r2, [pc, #416]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002372:	6093      	str	r3, [r2, #8]
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	4964      	ldr	r1, [pc, #400]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d017      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800239a:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	4959      	ldr	r1, [pc, #356]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b8:	d101      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d017      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	494a      	ldr	r1, [pc, #296]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f4:	d101      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 808b 	beq.w	800253a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	; 0x40
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a34      	ldr	r2, [pc, #208]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002448:	f7fe fc10 	bl	8000c6c <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fc0c 	bl	8000c6c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e38d      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d035      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d02e      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a1a      	ldr	r2, [pc, #104]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024ae:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d114      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fbd4 	bl	8000c6c <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	e00a      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fbd0 	bl	8000c6c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e34f      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ee      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f6:	d111      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002506:	400b      	ands	r3, r1
 8002508:	4901      	ldr	r1, [pc, #4]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
 800250e:	e00b      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002510:	40023800 	.word	0x40023800
 8002514:	40007000 	.word	0x40007000
 8002518:	0ffffcff 	.word	0x0ffffcff
 800251c:	4bb3      	ldr	r3, [pc, #716]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4ab2      	ldr	r2, [pc, #712]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002526:	6093      	str	r3, [r2, #8]
 8002528:	4bb0      	ldr	r3, [pc, #704]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	49ad      	ldr	r1, [pc, #692]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002536:	4313      	orrs	r3, r2
 8002538:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002546:	4ba9      	ldr	r3, [pc, #676]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800254c:	4aa7      	ldr	r2, [pc, #668]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002556:	4ba5      	ldr	r3, [pc, #660]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	49a2      	ldr	r1, [pc, #648]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002574:	4b9d      	ldr	r3, [pc, #628]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002582:	499a      	ldr	r1, [pc, #616]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002596:	4b95      	ldr	r3, [pc, #596]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a4:	4991      	ldr	r1, [pc, #580]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c6:	4989      	ldr	r1, [pc, #548]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025da:	4b84      	ldr	r3, [pc, #528]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4980      	ldr	r1, [pc, #512]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025fc:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4978      	ldr	r1, [pc, #480]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261e:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f023 020c 	bic.w	r2, r3, #12
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	496f      	ldr	r1, [pc, #444]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	4967      	ldr	r1, [pc, #412]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002670:	495e      	ldr	r1, [pc, #376]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	4956      	ldr	r1, [pc, #344]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	4945      	ldr	r1, [pc, #276]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026ea:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	493c      	ldr	r1, [pc, #240]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271a:	4934      	ldr	r1, [pc, #208]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273c:	492b      	ldr	r1, [pc, #172]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274c:	d101      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	491b      	ldr	r1, [pc, #108]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a0:	4912      	ldr	r1, [pc, #72]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c4:	4909      	ldr	r1, [pc, #36]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00f      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	e002      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	4985      	ldr	r1, [pc, #532]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002804:	4b80      	ldr	r3, [pc, #512]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	497c      	ldr	r1, [pc, #496]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d005      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800282a:	f040 80d6 	bne.w	80029da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002834:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283a:	f7fe fa17 	bl	8000c6c <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002842:	f7fe fa13 	bl	8000c6c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e194      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002854:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11d      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002874:	4b64      	ldr	r3, [pc, #400]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002888:	0e1b      	lsrs	r3, r3, #24
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	019a      	lsls	r2, r3, #6
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	071b      	lsls	r3, r3, #28
 80028a8:	4957      	ldr	r1, [pc, #348]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d02e      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d129      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028dc:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f0:	0f1b      	lsrs	r3, r3, #28
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	019a      	lsls	r2, r3, #6
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	071b      	lsls	r3, r3, #28
 8002910:	493d      	ldr	r1, [pc, #244]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800291a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291e:	f023 021f 	bic.w	r2, r3, #31
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	3b01      	subs	r3, #1
 8002928:	4937      	ldr	r1, [pc, #220]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01d      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002942:	0e1b      	lsrs	r3, r3, #24
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002950:	0f1b      	lsrs	r3, r3, #28
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	019a      	lsls	r2, r3, #6
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	071b      	lsls	r3, r3, #28
 8002970:	4925      	ldr	r1, [pc, #148]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d011      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	019a      	lsls	r2, r3, #6
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	071b      	lsls	r3, r3, #28
 80029a0:	4919      	ldr	r1, [pc, #100]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b4:	f7fe f95a 	bl	8000c6c <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029bc:	f7fe f956 	bl	8000c6c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0d7      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 80cd 	bne.w	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ee:	f7fe f93d 	bl	8000c6c <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029f6:	f7fe f939 	bl	8000c6c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d903      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0ba      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a0c:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a18:	d0ed      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02e      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d12a      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a42:	4b51      	ldr	r3, [pc, #324]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a50:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	0f1b      	lsrs	r3, r3, #28
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	019a      	lsls	r2, r3, #6
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	4944      	ldr	r1, [pc, #272]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a7e:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	493d      	ldr	r1, [pc, #244]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d022      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aac:	d11d      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	0e1b      	lsrs	r3, r3, #24
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	0f1b      	lsrs	r3, r3, #28
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	019a      	lsls	r2, r3, #6
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	071b      	lsls	r3, r3, #28
 8002ae2:	4929      	ldr	r1, [pc, #164]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d028      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	0e1b      	lsrs	r3, r3, #24
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	019a      	lsls	r2, r3, #6
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	071b      	lsls	r3, r3, #28
 8002b2a:	4917      	ldr	r1, [pc, #92]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4911      	ldr	r1, [pc, #68]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe f88a 	bl	8000c6c <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b5c:	f7fe f886 	bl	8000c6c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e007      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7a:	d1ef      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e040      	b.n	8002c20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd feea 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa7c 	bl	80030c8 <UART_SetConfig>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e022      	b.n	8002c20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fd14 	bl	8003610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c06:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fd9b 	bl	8003754 <UART_CheckIdleState>
 8002c1e:	4603      	mov	r3, r0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d17f      	bne.n	8002d40 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_UART_Transmit+0x24>
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e078      	b.n	8002d42 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Transmit+0x36>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e071      	b.n	8002d42 <HAL_UART_Transmit+0x11a>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2221      	movs	r2, #33	; 0x21
 8002c70:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c72:	f7fd fffb 	bl	8000c6c <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d108      	bne.n	8002ca4 <HAL_UART_Transmit+0x7c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e003      	b.n	8002cac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cac:	e02c      	b.n	8002d08 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fd7a 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e03c      	b.n	8002d42 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	e007      	b.n	8002cf6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1cc      	bne.n	8002cae <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2140      	movs	r1, #64	; 0x40
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fd47 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e009      	b.n	8002d42 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d16c      	bne.n	8002e3c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_UART_Receive_DMA+0x22>
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e065      	b.n	8002e3e <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Receive_DMA+0x34>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e05e      	b.n	8002e3e <HAL_UART_Receive_DMA+0xf2>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2222      	movs	r2, #34	; 0x22
 8002da0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02a      	beq.n	8002e00 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_UART_Receive_DMA+0xfc>)
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <HAL_UART_Receive_DMA+0x100>)
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_UART_Receive_DMA+0x104>)
 8002dc0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3324      	adds	r3, #36	; 0x24
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	461a      	mov	r2, r3
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f7fe f933 	bl	8001048 <HAL_DMA_Start_IT>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2210      	movs	r2, #16
 8002dec:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01e      	b.n	8002e3e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e36:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	080038ad 	.word	0x080038ad
 8002e4c:	08003911 	.word	0x08003911
 8002e50:	0800392d 	.word	0x0800392d

08002e54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80eb 	beq.w	8003076 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
      }
      return;
 8002ea8:	e0e5      	b.n	8003076 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80c0 	beq.w	8003032 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80b5 	beq.w	8003032 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x9c>
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <HAL_UART_IRQHandler+0xc4>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <HAL_UART_IRQHandler+0xec>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2204      	movs	r2, #4
 8002f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f38:	f043 0202 	orr.w	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d013      	beq.n	8002f72 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2208      	movs	r2, #8
 8002f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6a:	f043 0208 	orr.w	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d07f      	beq.n	800307a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d004      	beq.n	8002fbc <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d031      	beq.n	8003020 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fc55 	bl	800386c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d123      	bne.n	8003018 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fde:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_UART_IRQHandler+0x234>)
 8002fee:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe f887 	bl	8001108 <HAL_DMA_Abort_IT>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d016      	beq.n	800302e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800300a:	4610      	mov	r0, r2
 800300c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300e:	e00e      	b.n	800302e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f84f 	bl	80030b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003016:	e00a      	b.n	800302e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f84b 	bl	80030b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301e:	e006      	b.n	800302e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f847 	bl	80030b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800302c:	e025      	b.n	800307a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302e:	bf00      	nop
    return;
 8003030:	e023      	b.n	800307a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00d      	beq.n	8003058 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304a:	2b00      	cmp	r3, #0
 800304c:	d017      	beq.n	800307e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
    }
    return;
 8003056:	e012      	b.n	800307e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00e      	beq.n	8003080 <HAL_UART_IRQHandler+0x22c>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fcaf 	bl	80039d0 <UART_EndTransmit_IT>
    return;
 8003072:	bf00      	nop
 8003074:	e004      	b.n	8003080 <HAL_UART_IRQHandler+0x22c>
      return;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_UART_IRQHandler+0x22c>
    return;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_UART_IRQHandler+0x22c>
    return;
 800307e:	bf00      	nop
  }

}
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	080039a5 	.word	0x080039a5

0800308c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4bb1      	ldr	r3, [pc, #708]	; (80033bc <UART_SetConfig+0x2f4>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	6939      	ldr	r1, [r7, #16]
 8003100:	430b      	orrs	r3, r1
 8003102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a9f      	ldr	r2, [pc, #636]	; (80033c0 <UART_SetConfig+0x2f8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d121      	bne.n	800318c <UART_SetConfig+0xc4>
 8003148:	4b9e      	ldr	r3, [pc, #632]	; (80033c4 <UART_SetConfig+0x2fc>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b03      	cmp	r3, #3
 8003154:	d816      	bhi.n	8003184 <UART_SetConfig+0xbc>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <UART_SetConfig+0x94>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003179 	.word	0x08003179
 8003164:	08003173 	.word	0x08003173
 8003168:	0800317f 	.word	0x0800317f
 800316c:	2301      	movs	r3, #1
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e151      	b.n	8003416 <UART_SetConfig+0x34e>
 8003172:	2302      	movs	r3, #2
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e14e      	b.n	8003416 <UART_SetConfig+0x34e>
 8003178:	2304      	movs	r3, #4
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e14b      	b.n	8003416 <UART_SetConfig+0x34e>
 800317e:	2308      	movs	r3, #8
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e148      	b.n	8003416 <UART_SetConfig+0x34e>
 8003184:	2310      	movs	r3, #16
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	bf00      	nop
 800318a:	e144      	b.n	8003416 <UART_SetConfig+0x34e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a8d      	ldr	r2, [pc, #564]	; (80033c8 <UART_SetConfig+0x300>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d134      	bne.n	8003200 <UART_SetConfig+0x138>
 8003196:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <UART_SetConfig+0x2fc>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d829      	bhi.n	80031f8 <UART_SetConfig+0x130>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <UART_SetConfig+0xe4>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031e1 	.word	0x080031e1
 80031b0:	080031f9 	.word	0x080031f9
 80031b4:	080031f9 	.word	0x080031f9
 80031b8:	080031f9 	.word	0x080031f9
 80031bc:	080031ed 	.word	0x080031ed
 80031c0:	080031f9 	.word	0x080031f9
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	080031f9 	.word	0x080031f9
 80031cc:	080031e7 	.word	0x080031e7
 80031d0:	080031f9 	.word	0x080031f9
 80031d4:	080031f9 	.word	0x080031f9
 80031d8:	080031f9 	.word	0x080031f9
 80031dc:	080031f3 	.word	0x080031f3
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e117      	b.n	8003416 <UART_SetConfig+0x34e>
 80031e6:	2302      	movs	r3, #2
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e114      	b.n	8003416 <UART_SetConfig+0x34e>
 80031ec:	2304      	movs	r3, #4
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e111      	b.n	8003416 <UART_SetConfig+0x34e>
 80031f2:	2308      	movs	r3, #8
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	e10e      	b.n	8003416 <UART_SetConfig+0x34e>
 80031f8:	2310      	movs	r3, #16
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	bf00      	nop
 80031fe:	e10a      	b.n	8003416 <UART_SetConfig+0x34e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a71      	ldr	r2, [pc, #452]	; (80033cc <UART_SetConfig+0x304>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d120      	bne.n	800324c <UART_SetConfig+0x184>
 800320a:	4b6e      	ldr	r3, [pc, #440]	; (80033c4 <UART_SetConfig+0x2fc>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003214:	2b10      	cmp	r3, #16
 8003216:	d00f      	beq.n	8003238 <UART_SetConfig+0x170>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d802      	bhi.n	8003222 <UART_SetConfig+0x15a>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <UART_SetConfig+0x164>
 8003220:	e010      	b.n	8003244 <UART_SetConfig+0x17c>
 8003222:	2b20      	cmp	r3, #32
 8003224:	d005      	beq.n	8003232 <UART_SetConfig+0x16a>
 8003226:	2b30      	cmp	r3, #48	; 0x30
 8003228:	d009      	beq.n	800323e <UART_SetConfig+0x176>
 800322a:	e00b      	b.n	8003244 <UART_SetConfig+0x17c>
 800322c:	2300      	movs	r3, #0
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e0f1      	b.n	8003416 <UART_SetConfig+0x34e>
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e0ee      	b.n	8003416 <UART_SetConfig+0x34e>
 8003238:	2304      	movs	r3, #4
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e0eb      	b.n	8003416 <UART_SetConfig+0x34e>
 800323e:	2308      	movs	r3, #8
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e0e8      	b.n	8003416 <UART_SetConfig+0x34e>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	bf00      	nop
 800324a:	e0e4      	b.n	8003416 <UART_SetConfig+0x34e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5f      	ldr	r2, [pc, #380]	; (80033d0 <UART_SetConfig+0x308>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d120      	bne.n	8003298 <UART_SetConfig+0x1d0>
 8003256:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <UART_SetConfig+0x2fc>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d00f      	beq.n	8003284 <UART_SetConfig+0x1bc>
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d802      	bhi.n	800326e <UART_SetConfig+0x1a6>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <UART_SetConfig+0x1b0>
 800326c:	e010      	b.n	8003290 <UART_SetConfig+0x1c8>
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d005      	beq.n	800327e <UART_SetConfig+0x1b6>
 8003272:	2bc0      	cmp	r3, #192	; 0xc0
 8003274:	d009      	beq.n	800328a <UART_SetConfig+0x1c2>
 8003276:	e00b      	b.n	8003290 <UART_SetConfig+0x1c8>
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e0cb      	b.n	8003416 <UART_SetConfig+0x34e>
 800327e:	2302      	movs	r3, #2
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e0c8      	b.n	8003416 <UART_SetConfig+0x34e>
 8003284:	2304      	movs	r3, #4
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e0c5      	b.n	8003416 <UART_SetConfig+0x34e>
 800328a:	2308      	movs	r3, #8
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e0c2      	b.n	8003416 <UART_SetConfig+0x34e>
 8003290:	2310      	movs	r3, #16
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	bf00      	nop
 8003296:	e0be      	b.n	8003416 <UART_SetConfig+0x34e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4d      	ldr	r2, [pc, #308]	; (80033d4 <UART_SetConfig+0x30c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d124      	bne.n	80032ec <UART_SetConfig+0x224>
 80032a2:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <UART_SetConfig+0x2fc>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b0:	d012      	beq.n	80032d8 <UART_SetConfig+0x210>
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d802      	bhi.n	80032be <UART_SetConfig+0x1f6>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <UART_SetConfig+0x204>
 80032bc:	e012      	b.n	80032e4 <UART_SetConfig+0x21c>
 80032be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c2:	d006      	beq.n	80032d2 <UART_SetConfig+0x20a>
 80032c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c8:	d009      	beq.n	80032de <UART_SetConfig+0x216>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x21c>
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e0a1      	b.n	8003416 <UART_SetConfig+0x34e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e09e      	b.n	8003416 <UART_SetConfig+0x34e>
 80032d8:	2304      	movs	r3, #4
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e09b      	b.n	8003416 <UART_SetConfig+0x34e>
 80032de:	2308      	movs	r3, #8
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e098      	b.n	8003416 <UART_SetConfig+0x34e>
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	bf00      	nop
 80032ea:	e094      	b.n	8003416 <UART_SetConfig+0x34e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a39      	ldr	r2, [pc, #228]	; (80033d8 <UART_SetConfig+0x310>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d124      	bne.n	8003340 <UART_SetConfig+0x278>
 80032f6:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <UART_SetConfig+0x2fc>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d012      	beq.n	800332c <UART_SetConfig+0x264>
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d802      	bhi.n	8003312 <UART_SetConfig+0x24a>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <UART_SetConfig+0x258>
 8003310:	e012      	b.n	8003338 <UART_SetConfig+0x270>
 8003312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003316:	d006      	beq.n	8003326 <UART_SetConfig+0x25e>
 8003318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800331c:	d009      	beq.n	8003332 <UART_SetConfig+0x26a>
 800331e:	e00b      	b.n	8003338 <UART_SetConfig+0x270>
 8003320:	2301      	movs	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e077      	b.n	8003416 <UART_SetConfig+0x34e>
 8003326:	2302      	movs	r3, #2
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e074      	b.n	8003416 <UART_SetConfig+0x34e>
 800332c:	2304      	movs	r3, #4
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e071      	b.n	8003416 <UART_SetConfig+0x34e>
 8003332:	2308      	movs	r3, #8
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e06e      	b.n	8003416 <UART_SetConfig+0x34e>
 8003338:	2310      	movs	r3, #16
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	bf00      	nop
 800333e:	e06a      	b.n	8003416 <UART_SetConfig+0x34e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a25      	ldr	r2, [pc, #148]	; (80033dc <UART_SetConfig+0x314>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d124      	bne.n	8003394 <UART_SetConfig+0x2cc>
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003358:	d012      	beq.n	8003380 <UART_SetConfig+0x2b8>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d802      	bhi.n	8003366 <UART_SetConfig+0x29e>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <UART_SetConfig+0x2ac>
 8003364:	e012      	b.n	800338c <UART_SetConfig+0x2c4>
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336a:	d006      	beq.n	800337a <UART_SetConfig+0x2b2>
 800336c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003370:	d009      	beq.n	8003386 <UART_SetConfig+0x2be>
 8003372:	e00b      	b.n	800338c <UART_SetConfig+0x2c4>
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e04d      	b.n	8003416 <UART_SetConfig+0x34e>
 800337a:	2302      	movs	r3, #2
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e04a      	b.n	8003416 <UART_SetConfig+0x34e>
 8003380:	2304      	movs	r3, #4
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e047      	b.n	8003416 <UART_SetConfig+0x34e>
 8003386:	2308      	movs	r3, #8
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e044      	b.n	8003416 <UART_SetConfig+0x34e>
 800338c:	2310      	movs	r3, #16
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	bf00      	nop
 8003392:	e040      	b.n	8003416 <UART_SetConfig+0x34e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <UART_SetConfig+0x318>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d139      	bne.n	8003412 <UART_SetConfig+0x34a>
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <UART_SetConfig+0x2fc>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ac:	d027      	beq.n	80033fe <UART_SetConfig+0x336>
 80033ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b2:	d817      	bhi.n	80033e4 <UART_SetConfig+0x31c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <UART_SetConfig+0x32a>
 80033b8:	e027      	b.n	800340a <UART_SetConfig+0x342>
 80033ba:	bf00      	nop
 80033bc:	efff69f3 	.word	0xefff69f3
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40004c00 	.word	0x40004c00
 80033d4:	40005000 	.word	0x40005000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	40007800 	.word	0x40007800
 80033e0:	40007c00 	.word	0x40007c00
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e8:	d006      	beq.n	80033f8 <UART_SetConfig+0x330>
 80033ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ee:	d009      	beq.n	8003404 <UART_SetConfig+0x33c>
 80033f0:	e00b      	b.n	800340a <UART_SetConfig+0x342>
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e00e      	b.n	8003416 <UART_SetConfig+0x34e>
 80033f8:	2302      	movs	r3, #2
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e00b      	b.n	8003416 <UART_SetConfig+0x34e>
 80033fe:	2304      	movs	r3, #4
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e008      	b.n	8003416 <UART_SetConfig+0x34e>
 8003404:	2308      	movs	r3, #8
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e005      	b.n	8003416 <UART_SetConfig+0x34e>
 800340a:	2310      	movs	r3, #16
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	bf00      	nop
 8003410:	e001      	b.n	8003416 <UART_SetConfig+0x34e>
 8003412:	2310      	movs	r3, #16
 8003414:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d17c      	bne.n	800351a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d859      	bhi.n	80034da <UART_SetConfig+0x412>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0x364>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003451 	.word	0x08003451
 8003430:	0800346f 	.word	0x0800346f
 8003434:	0800348d 	.word	0x0800348d
 8003438:	080034db 	.word	0x080034db
 800343c:	080034a5 	.word	0x080034a5
 8003440:	080034db 	.word	0x080034db
 8003444:	080034db 	.word	0x080034db
 8003448:	080034db 	.word	0x080034db
 800344c:	080034c3 	.word	0x080034c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003450:	f7fe ff4e 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003454:	4603      	mov	r3, r0
 8003456:	005a      	lsls	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	441a      	add	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	61bb      	str	r3, [r7, #24]
        break;
 800346c:	e038      	b.n	80034e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800346e:	f7fe ff53 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8003472:	4603      	mov	r3, r0
 8003474:	005a      	lsls	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	61bb      	str	r3, [r7, #24]
        break;
 800348a:	e029      	b.n	80034e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	085a      	lsrs	r2, r3, #1
 8003492:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <UART_SetConfig+0x540>)
 8003494:	4413      	add	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	fbb3 f3f2 	udiv	r3, r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	61bb      	str	r3, [r7, #24]
        break;
 80034a2:	e01d      	b.n	80034e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034a4:	f7fe fe40 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80034a8:	4603      	mov	r3, r0
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	61bb      	str	r3, [r7, #24]
        break;
 80034c0:	e00e      	b.n	80034e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	61bb      	str	r3, [r7, #24]
        break;
 80034d8:	e002      	b.n	80034e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
        break;
 80034de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d916      	bls.n	8003514 <UART_SetConfig+0x44c>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d212      	bcs.n	8003514 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f023 030f 	bic.w	r3, r3, #15
 80034f6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	b29a      	uxth	r2, r3
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	4313      	orrs	r3, r2
 8003508:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	89fa      	ldrh	r2, [r7, #14]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	e06e      	b.n	80035f2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	75fb      	strb	r3, [r7, #23]
 8003518:	e06b      	b.n	80035f2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d857      	bhi.n	80035d0 <UART_SetConfig+0x508>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x460>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003569 	.word	0x08003569
 8003530:	08003585 	.word	0x08003585
 8003534:	080035d1 	.word	0x080035d1
 8003538:	0800359d 	.word	0x0800359d
 800353c:	080035d1 	.word	0x080035d1
 8003540:	080035d1 	.word	0x080035d1
 8003544:	080035d1 	.word	0x080035d1
 8003548:	080035b9 	.word	0x080035b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800354c:	f7fe fed0 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	441a      	add	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	61bb      	str	r3, [r7, #24]
        break;
 8003566:	e036      	b.n	80035d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003568:	f7fe fed6 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 800356c:	4602      	mov	r2, r0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	b29b      	uxth	r3, r3
 8003580:	61bb      	str	r3, [r7, #24]
        break;
 8003582:	e028      	b.n	80035d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	085a      	lsrs	r2, r3, #1
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <UART_SetConfig+0x544>)
 800358c:	4413      	add	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6852      	ldr	r2, [r2, #4]
 8003592:	fbb3 f3f2 	udiv	r3, r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	61bb      	str	r3, [r7, #24]
        break;
 800359a:	e01c      	b.n	80035d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800359c:	f7fe fdc4 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	61bb      	str	r3, [r7, #24]
        break;
 80035b6:	e00e      	b.n	80035d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	61bb      	str	r3, [r7, #24]
        break;
 80035ce:	e002      	b.n	80035d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	75fb      	strb	r3, [r7, #23]
        break;
 80035d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b0f      	cmp	r3, #15
 80035da:	d908      	bls.n	80035ee <UART_SetConfig+0x526>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e2:	d204      	bcs.n	80035ee <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e001      	b.n	80035f2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	01e84800 	.word	0x01e84800
 800360c:	00f42400 	.word	0x00f42400

08003610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01a      	beq.n	8003726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370e:	d10a      	bne.n	8003726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003762:	f7fd fa83 	bl	8000c6c <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d10e      	bne.n	8003794 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f814 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e00a      	b.n	80037aa <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c2:	e02a      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d026      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fd fa4e 	bl	8000c6c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11b      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e00f      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d0c5      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003858:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003882:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c2:	d01e      	beq.n	8003902 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038fa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7fc ffe4 	bl	80008d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fbbe 	bl	80030a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003944:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d109      	bne.n	8003968 <UART_DMAError+0x3c>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b21      	cmp	r3, #33	; 0x21
 8003958:	d106      	bne.n	8003968 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff6d 	bl	8003842 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d109      	bne.n	800398a <UART_DMAError+0x5e>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b22      	cmp	r3, #34	; 0x22
 800397a:	d106      	bne.n	800398a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003984:	6978      	ldr	r0, [r7, #20]
 8003986:	f7ff ff71 	bl	800386c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff fb8c 	bl	80030b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff fb76 	bl	80030b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fb49 	bl	800308c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <__libc_init_array>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4e0d      	ldr	r6, [pc, #52]	; (8003a3c <__libc_init_array+0x38>)
 8003a08:	4c0d      	ldr	r4, [pc, #52]	; (8003a40 <__libc_init_array+0x3c>)
 8003a0a:	1ba4      	subs	r4, r4, r6
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	2500      	movs	r5, #0
 8003a10:	42a5      	cmp	r5, r4
 8003a12:	d109      	bne.n	8003a28 <__libc_init_array+0x24>
 8003a14:	4e0b      	ldr	r6, [pc, #44]	; (8003a44 <__libc_init_array+0x40>)
 8003a16:	4c0c      	ldr	r4, [pc, #48]	; (8003a48 <__libc_init_array+0x44>)
 8003a18:	f000 f820 	bl	8003a5c <_init>
 8003a1c:	1ba4      	subs	r4, r4, r6
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	2500      	movs	r5, #0
 8003a22:	42a5      	cmp	r5, r4
 8003a24:	d105      	bne.n	8003a32 <__libc_init_array+0x2e>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a2c:	4798      	blx	r3
 8003a2e:	3501      	adds	r5, #1
 8003a30:	e7ee      	b.n	8003a10 <__libc_init_array+0xc>
 8003a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a36:	4798      	blx	r3
 8003a38:	3501      	adds	r5, #1
 8003a3a:	e7f2      	b.n	8003a22 <__libc_init_array+0x1e>
 8003a3c:	08003a9c 	.word	0x08003a9c
 8003a40:	08003a9c 	.word	0x08003a9c
 8003a44:	08003a9c 	.word	0x08003a9c
 8003a48:	08003aa0 	.word	0x08003aa0

08003a4c <memset>:
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <_init>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr

08003a68 <_fini>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr
